import puppeteer from 'puppeteer'

export interface PDFOptions {
  format?: 'A4' | 'Letter'
  margin?: {
    top?: string
    right?: string
    bottom?: string
    left?: string
  }
  printBackground?: boolean
}

export async function generatePDF(htmlContent: string, options: PDFOptions = {}): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  })

  try {
    const page = await browser.newPage()
    
    await page.setContent(htmlContent, {
      waitUntil: 'networkidle0'
    })

    const pdfBuffer = await page.pdf({
      format: options.format || 'A4',
      margin: options.margin || {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      printBackground: options.printBackground || true
    })

    return pdfBuffer
  } finally {
    await browser.close()
  }
}

export function createDocumentHTML(jsonData: any, serviceName: string): string {
  const disclaimer = jsonData.disclaimer || "FOR ENTERTAINMENT PURPOSES ONLY - NOT A REAL DOCUMENT"
  
  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${serviceName}</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            line-height: 1.4;
            margin: 0;
            padding: 20px;
            background-color: #ffffff;
            color: #000000;
            font-size: 11px;
        }
        
        .document-header {
            border-bottom: 2px solid #000;
            padding-bottom: 10px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .document-title {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .document-content {
            margin-bottom: 20px;
        }
        
        .section {
            margin-bottom: 15px;
        }
        
        .section-title {
            font-weight: bold;
            text-decoration: underline;
            margin-bottom: 5px;
        }
        
        .field {
            margin-bottom: 3px;
        }
        
        .field-label {
            font-weight: bold;
        }
        
        .list-item {
            margin-bottom: 2px;
            margin-left: 10px;
        }
        
        .document-footer {
            border-top: 1px solid #ccc;
            margin-top: 30px;
            padding-top: 10px;
            font-size: 9px;
            text-align: center;
            color: #666;
        }
        
        .classification {
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            padding: 5px;
            margin: 10px 0;
            font-size: 9px;
            text-align: center;
        }
        
        .signature-line {
            margin-top: 20px;
            border-bottom: 1px solid #000;
            width: 200px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .two-column {
            display: flex;
            justify-content: space-between;
        }
        
        .column {
            width: 48%;
        }
        
        @media print {
            body {
                margin: 0;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="document-header">
        <div class="document-title">${jsonData.document_title || serviceName}</div>
    </div>
    
    <div class="document-content">
        ${renderJSONToHTML(jsonData)}
    </div>
    
    <div class="document-footer">
        <div class="classification">
            ⚠️ ${disclaimer}
        </div>
        <p>Generated by Internet Streets - The AI Black Market</p>
        <p>This document is fictional and for novelty use only.</p>
    </div>
</body>
</html>
  `
}

function renderJSONToHTML(data: any): string {
  let html = ''
  
  // Skip document_title and disclaimer as they're handled separately
  const skipFields = ['document_title', 'disclaimer']
  
  for (const [key, value] of Object.entries(data)) {
    if (skipFields.includes(key)) continue
    
    html += `<div class="section">`
    html += `<div class="section-title">${formatFieldName(key)}</div>`
    
    if (typeof value === 'object' && value !== null) {
      if (Array.isArray(value)) {
        html += renderArray(value)
      } else {
        html += renderObject(value)
      }
    } else {
      html += `<div class="field">${value}</div>`
    }
    
    html += `</div>`
  }
  
  return html
}

function renderObject(obj: any): string {
  let html = ''
  for (const [key, value] of Object.entries(obj)) {
    html += `<div class="field">`
    html += `<span class="field-label">${formatFieldName(key)}:</span> ${value}`
    html += `</div>`
  }
  return html
}

function renderArray(arr: any[]): string {
  let html = ''
  for (const item of arr) {
    if (typeof item === 'object' && item !== null) {
      html += `<div class="list-item">`
      for (const [key, value] of Object.entries(item)) {
        html += `<span class="field-label">${formatFieldName(key)}:</span> ${value}<br>`
      }
      html += `</div>`
    } else {
      html += `<div class="list-item">• ${item}</div>`
    }
  }
  return html
}

function formatFieldName(fieldName: string): string {
  return fieldName
    .replace(/_/g, ' ')
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim()
}
